"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.adaptResponse = adaptResponse;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function adaptation1AdaptFacetValue(facetValue) {
  var additionalFacetValueFieldsForField = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var hasValue = facetValue.hasOwnProperty("value");
  var count = facetValue.count,
      value = facetValue.value,
      rest = (0, _objectWithoutProperties2.default)(facetValue, ["count", "value"]);
  return {
    count: count,
    value: hasValue ? value : _objectSpread({}, rest, {}, additionalFacetValueFieldsForField)
  };
}

function adaptation2AddLabelToFacet(fieldName, facet) {
  return _objectSpread({
    field: fieldName
  }, facet);
}

function adaptFacets(facets, _ref) {
  var _ref$additionalFacetV = _ref.additionalFacetValueFields,
      additionalFacetValueFields = _ref$additionalFacetV === void 0 ? {} : _ref$additionalFacetV;
  if (!facets || Object.keys(facets).length === 0) return facets;
  return Object.entries(facets).reduce(function (acc, _ref2) {
    var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
        fieldName = _ref3[0],
        facet = _ref3[1];

    var adaptedFacet = facet.map(function (v) {
      var type = v.type,
          data = v.data,
          rest = (0, _objectWithoutProperties2.default)(v, ["type", "data"]);
      return adaptation2AddLabelToFacet(fieldName, _objectSpread({
        type: type,
        data: data.map(function (f) {
          return adaptation1AdaptFacetValue(f, additionalFacetValueFields[fieldName]);
        })
      }, rest));
    });
    return _objectSpread({}, acc, (0, _defineProperty2.default)({}, fieldName, adaptedFacet));
  }, {});
}

function adaptResponse(response) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var facets = response.info.facets;
  var requestId = response.info.meta.request_id;
  var totalPages = response.info.meta.page ? response.info.meta.page.total_pages : undefined;
  var totalResults = response.info.meta.page ? response.info.meta.page.total_results : undefined;
  return _objectSpread({}, facets && {
    facets: adaptFacets(facets, options)
  }, {
    requestId: requestId,
    results: response.rawResults
  }, totalPages !== undefined && {
    totalPages: totalPages
  }, {}, totalResults !== undefined && {
    totalResults: totalResults
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXNwb25zZUFkYXB0ZXIuanMiXSwibmFtZXMiOlsiYWRhcHRhdGlvbjFBZGFwdEZhY2V0VmFsdWUiLCJmYWNldFZhbHVlIiwiYWRkaXRpb25hbEZhY2V0VmFsdWVGaWVsZHNGb3JGaWVsZCIsImhhc1ZhbHVlIiwiaGFzT3duUHJvcGVydHkiLCJjb3VudCIsInZhbHVlIiwicmVzdCIsImFkYXB0YXRpb24yQWRkTGFiZWxUb0ZhY2V0IiwiZmllbGROYW1lIiwiZmFjZXQiLCJmaWVsZCIsImFkYXB0RmFjZXRzIiwiZmFjZXRzIiwiYWRkaXRpb25hbEZhY2V0VmFsdWVGaWVsZHMiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiZW50cmllcyIsInJlZHVjZSIsImFjYyIsImFkYXB0ZWRGYWNldCIsIm1hcCIsInYiLCJ0eXBlIiwiZGF0YSIsImYiLCJhZGFwdFJlc3BvbnNlIiwicmVzcG9uc2UiLCJvcHRpb25zIiwiaW5mbyIsInJlcXVlc3RJZCIsIm1ldGEiLCJyZXF1ZXN0X2lkIiwidG90YWxQYWdlcyIsInBhZ2UiLCJ0b3RhbF9wYWdlcyIsInVuZGVmaW5lZCIsInRvdGFsUmVzdWx0cyIsInRvdGFsX3Jlc3VsdHMiLCJyZXN1bHRzIiwicmF3UmVzdWx0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLFNBQVNBLDBCQUFULENBQ0VDLFVBREYsRUFHRTtBQUFBLE1BREFDLGtDQUNBLHVFQURxQyxFQUNyQztBQUNBLE1BQU1DLFFBQVEsR0FBR0YsVUFBVSxDQUFDRyxjQUFYLENBQTBCLE9BQTFCLENBQWpCO0FBREEsTUFFUUMsS0FGUixHQUVrQ0osVUFGbEMsQ0FFUUksS0FGUjtBQUFBLE1BRWVDLEtBRmYsR0FFa0NMLFVBRmxDLENBRWVLLEtBRmY7QUFBQSxNQUV5QkMsSUFGekIsMENBRWtDTixVQUZsQztBQUdBLFNBQU87QUFDTEksSUFBQUEsS0FBSyxFQUFMQSxLQURLO0FBRUxDLElBQUFBLEtBQUssRUFBRUgsUUFBUSxHQUNYRyxLQURXLHFCQUdOQyxJQUhNLE1BSU5MLGtDQUpNO0FBRlYsR0FBUDtBQVNEOztBQUVELFNBQVNNLDBCQUFULENBQW9DQyxTQUFwQyxFQUErQ0MsS0FBL0MsRUFBc0Q7QUFDcEQ7QUFDRUMsSUFBQUEsS0FBSyxFQUFFRjtBQURULEtBRUtDLEtBRkw7QUFJRDs7QUFFRCxTQUFTRSxXQUFULENBQXFCQyxNQUFyQixRQUFrRTtBQUFBLG1DQUFuQ0MsMEJBQW1DO0FBQUEsTUFBbkNBLDBCQUFtQyxzQ0FBTixFQUFNO0FBQ2hFLE1BQUksQ0FBQ0QsTUFBRCxJQUFXRSxNQUFNLENBQUNDLElBQVAsQ0FBWUgsTUFBWixFQUFvQkksTUFBcEIsS0FBK0IsQ0FBOUMsRUFBaUQsT0FBT0osTUFBUDtBQUVqRCxTQUFPRSxNQUFNLENBQUNHLE9BQVAsQ0FBZUwsTUFBZixFQUF1Qk0sTUFBdkIsQ0FBOEIsVUFBQ0MsR0FBRCxTQUE2QjtBQUFBO0FBQUEsUUFBdEJYLFNBQXNCO0FBQUEsUUFBWEMsS0FBVzs7QUFDaEUsUUFBTVcsWUFBWSxHQUFHWCxLQUFLLENBQUNZLEdBQU4sQ0FBVSxVQUFBQyxDQUFDLEVBQUk7QUFBQSxVQUMxQkMsSUFEMEIsR0FDRkQsQ0FERSxDQUMxQkMsSUFEMEI7QUFBQSxVQUNwQkMsSUFEb0IsR0FDRkYsQ0FERSxDQUNwQkUsSUFEb0I7QUFBQSxVQUNYbEIsSUFEVywwQ0FDRmdCLENBREU7QUFFbEMsYUFBT2YsMEJBQTBCLENBQUNDLFNBQUQ7QUFDL0JlLFFBQUFBLElBQUksRUFBSkEsSUFEK0I7QUFFL0JDLFFBQUFBLElBQUksRUFBRUEsSUFBSSxDQUFDSCxHQUFMLENBQVMsVUFBQUksQ0FBQztBQUFBLGlCQUNkMUIsMEJBQTBCLENBQUMwQixDQUFELEVBQUlaLDBCQUEwQixDQUFDTCxTQUFELENBQTlCLENBRFo7QUFBQSxTQUFWO0FBRnlCLFNBSzVCRixJQUw0QixFQUFqQztBQU9ELEtBVG9CLENBQXJCO0FBV0EsNkJBQ0thLEdBREwsb0NBRUdYLFNBRkgsRUFFZVksWUFGZjtBQUlELEdBaEJNLEVBZ0JKLEVBaEJJLENBQVA7QUFpQkQ7O0FBRU0sU0FBU00sYUFBVCxDQUF1QkMsUUFBdkIsRUFBK0M7QUFBQSxNQUFkQyxPQUFjLHVFQUFKLEVBQUk7QUFDcEQsTUFBTWhCLE1BQU0sR0FBR2UsUUFBUSxDQUFDRSxJQUFULENBQWNqQixNQUE3QjtBQUNBLE1BQU1rQixTQUFTLEdBQUdILFFBQVEsQ0FBQ0UsSUFBVCxDQUFjRSxJQUFkLENBQW1CQyxVQUFyQztBQUVBLE1BQU1DLFVBQVUsR0FBR04sUUFBUSxDQUFDRSxJQUFULENBQWNFLElBQWQsQ0FBbUJHLElBQW5CLEdBQ2ZQLFFBQVEsQ0FBQ0UsSUFBVCxDQUFjRSxJQUFkLENBQW1CRyxJQUFuQixDQUF3QkMsV0FEVCxHQUVmQyxTQUZKO0FBSUEsTUFBTUMsWUFBWSxHQUFHVixRQUFRLENBQUNFLElBQVQsQ0FBY0UsSUFBZCxDQUFtQkcsSUFBbkIsR0FDakJQLFFBQVEsQ0FBQ0UsSUFBVCxDQUFjRSxJQUFkLENBQW1CRyxJQUFuQixDQUF3QkksYUFEUCxHQUVqQkYsU0FGSjtBQUlBLDJCQUNNeEIsTUFBTSxJQUFJO0FBQUVBLElBQUFBLE1BQU0sRUFBRUQsV0FBVyxDQUFDQyxNQUFELEVBQVNnQixPQUFUO0FBQXJCLEdBRGhCO0FBRUVFLElBQUFBLFNBQVMsRUFBVEEsU0FGRjtBQUdFUyxJQUFBQSxPQUFPLEVBQUVaLFFBQVEsQ0FBQ2E7QUFIcEIsS0FJTVAsVUFBVSxLQUFLRyxTQUFmLElBQTRCO0FBQUVILElBQUFBLFVBQVUsRUFBVkE7QUFBRixHQUpsQyxNQUtNSSxZQUFZLEtBQUtELFNBQWpCLElBQThCO0FBQUVDLElBQUFBLFlBQVksRUFBWkE7QUFBRixHQUxwQztBQU9EIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gYWRhcHRhdGlvbjFBZGFwdEZhY2V0VmFsdWUoXG4gIGZhY2V0VmFsdWUsXG4gIGFkZGl0aW9uYWxGYWNldFZhbHVlRmllbGRzRm9yRmllbGQgPSB7fVxuKSB7XG4gIGNvbnN0IGhhc1ZhbHVlID0gZmFjZXRWYWx1ZS5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpO1xuICBjb25zdCB7IGNvdW50LCB2YWx1ZSwgLi4ucmVzdCB9ID0gZmFjZXRWYWx1ZTtcbiAgcmV0dXJuIHtcbiAgICBjb3VudCxcbiAgICB2YWx1ZTogaGFzVmFsdWVcbiAgICAgID8gdmFsdWVcbiAgICAgIDoge1xuICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgLi4uYWRkaXRpb25hbEZhY2V0VmFsdWVGaWVsZHNGb3JGaWVsZFxuICAgICAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkYXB0YXRpb24yQWRkTGFiZWxUb0ZhY2V0KGZpZWxkTmFtZSwgZmFjZXQpIHtcbiAgcmV0dXJuIHtcbiAgICBmaWVsZDogZmllbGROYW1lLFxuICAgIC4uLmZhY2V0XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkYXB0RmFjZXRzKGZhY2V0cywgeyBhZGRpdGlvbmFsRmFjZXRWYWx1ZUZpZWxkcyA9IHt9IH0pIHtcbiAgaWYgKCFmYWNldHMgfHwgT2JqZWN0LmtleXMoZmFjZXRzKS5sZW5ndGggPT09IDApIHJldHVybiBmYWNldHM7XG5cbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGZhY2V0cykucmVkdWNlKChhY2MsIFtmaWVsZE5hbWUsIGZhY2V0XSkgPT4ge1xuICAgIGNvbnN0IGFkYXB0ZWRGYWNldCA9IGZhY2V0Lm1hcCh2ID0+IHtcbiAgICAgIGNvbnN0IHsgdHlwZSwgZGF0YSwgLi4ucmVzdCB9ID0gdjtcbiAgICAgIHJldHVybiBhZGFwdGF0aW9uMkFkZExhYmVsVG9GYWNldChmaWVsZE5hbWUsIHtcbiAgICAgICAgdHlwZSxcbiAgICAgICAgZGF0YTogZGF0YS5tYXAoZiA9PlxuICAgICAgICAgIGFkYXB0YXRpb24xQWRhcHRGYWNldFZhbHVlKGYsIGFkZGl0aW9uYWxGYWNldFZhbHVlRmllbGRzW2ZpZWxkTmFtZV0pXG4gICAgICAgICksXG4gICAgICAgIC4uLnJlc3RcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmFjYyxcbiAgICAgIFtmaWVsZE5hbWVdOiBhZGFwdGVkRmFjZXRcbiAgICB9O1xuICB9LCB7fSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGFwdFJlc3BvbnNlKHJlc3BvbnNlLCBvcHRpb25zID0ge30pIHtcbiAgY29uc3QgZmFjZXRzID0gcmVzcG9uc2UuaW5mby5mYWNldHM7XG4gIGNvbnN0IHJlcXVlc3RJZCA9IHJlc3BvbnNlLmluZm8ubWV0YS5yZXF1ZXN0X2lkO1xuXG4gIGNvbnN0IHRvdGFsUGFnZXMgPSByZXNwb25zZS5pbmZvLm1ldGEucGFnZVxuICAgID8gcmVzcG9uc2UuaW5mby5tZXRhLnBhZ2UudG90YWxfcGFnZXNcbiAgICA6IHVuZGVmaW5lZDtcblxuICBjb25zdCB0b3RhbFJlc3VsdHMgPSByZXNwb25zZS5pbmZvLm1ldGEucGFnZVxuICAgID8gcmVzcG9uc2UuaW5mby5tZXRhLnBhZ2UudG90YWxfcmVzdWx0c1xuICAgIDogdW5kZWZpbmVkO1xuXG4gIHJldHVybiB7XG4gICAgLi4uKGZhY2V0cyAmJiB7IGZhY2V0czogYWRhcHRGYWNldHMoZmFjZXRzLCBvcHRpb25zKSB9KSxcbiAgICByZXF1ZXN0SWQsXG4gICAgcmVzdWx0czogcmVzcG9uc2UucmF3UmVzdWx0cyxcbiAgICAuLi4odG90YWxQYWdlcyAhPT0gdW5kZWZpbmVkICYmIHsgdG90YWxQYWdlcyB9KSxcbiAgICAuLi4odG90YWxSZXN1bHRzICE9PSB1bmRlZmluZWQgJiYgeyB0b3RhbFJlc3VsdHMgfSlcbiAgfTtcbn1cbiJdfQ==