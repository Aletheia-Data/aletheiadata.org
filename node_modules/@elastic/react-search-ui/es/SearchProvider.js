import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import PropTypes from "prop-types";
import React, { Component } from "react";
import { SearchDriver } from "@elastic/search-ui";
import SearchContext from "./SearchContext";
import defaultA11yMessages from "./A11yNotifications";
/**
 * The SearchProvider primarily holds a reference to the SearchDriver and
 * exposes it to the rest of the application in a Context.
 */

var SearchProvider = /*#__PURE__*/function (_Component) {
  _inherits(SearchProvider, _Component);

  var _super = _createSuper(SearchProvider);

  function SearchProvider() {
    var _this;

    _classCallCheck(this, SearchProvider);

    _this = _super.call(this);
    _this.state = {
      driver: null
    };
    return _this;
  }

  _createClass(SearchProvider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var config = this.props.config; // This initialization is done inside of componentDidMount, because initializing the SearchDriver server side
      // will error out, since the driver depends on window. Placing the initialization inside of componentDidMount
      // assures that it won't attempt to initialize server side.

      var driver = new SearchDriver(_objectSpread({}, config, {
        a11yNotificationMessages: _objectSpread({}, defaultA11yMessages, {}, config.a11yNotificationMessages)
      }));
      this.setState({
        driver: driver
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.state.driver.tearDown();
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children; // Since driver is initialized in componentDidMount above, we are waiting
      // to render until the driver is available.

      if (!this.state.driver) return null; // Passing the entire "this.state" to the Context is significant. Because
      // Context determines when to re-render based on referential identity
      // something like this could cause unnecessary renders:
      //
      // <SearchContext.Provider value={{driver: this.state.driver}}>
      //
      // By passing the entire state, we ensure that re-renders only occur when
      // state is actually updated.

      return /*#__PURE__*/React.createElement(SearchContext.Provider, {
        value: this.state
      }, children);
    }
  }]);

  return SearchProvider;
}(Component);

_defineProperty(SearchProvider, "propTypes", {
  children: PropTypes.node.isRequired,
  // Not providing a shape here because the shape matches the shape of
  // SearchDriver. SearchDriver can do it's own parameter validation.
  config: PropTypes.object
});

export default SearchProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TZWFyY2hQcm92aWRlci5qcyJdLCJuYW1lcyI6WyJQcm9wVHlwZXMiLCJSZWFjdCIsIkNvbXBvbmVudCIsIlNlYXJjaERyaXZlciIsIlNlYXJjaENvbnRleHQiLCJkZWZhdWx0QTExeU1lc3NhZ2VzIiwiU2VhcmNoUHJvdmlkZXIiLCJzdGF0ZSIsImRyaXZlciIsImNvbmZpZyIsInByb3BzIiwiYTExeU5vdGlmaWNhdGlvbk1lc3NhZ2VzIiwic2V0U3RhdGUiLCJ0ZWFyRG93biIsImNoaWxkcmVuIiwibm9kZSIsImlzUmVxdWlyZWQiLCJvYmplY3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU9BLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxPQUFPQyxLQUFQLElBQWdCQyxTQUFoQixRQUFpQyxPQUFqQztBQUVBLFNBQVNDLFlBQVQsUUFBNkIsb0JBQTdCO0FBQ0EsT0FBT0MsYUFBUCxNQUEwQixpQkFBMUI7QUFFQSxPQUFPQyxtQkFBUCxNQUFnQyxxQkFBaEM7QUFFQTs7Ozs7SUFJTUMsYzs7Ozs7QUFRSiw0QkFBYztBQUFBOztBQUFBOztBQUNaO0FBQ0EsVUFBS0MsS0FBTCxHQUFhO0FBQ1hDLE1BQUFBLE1BQU0sRUFBRTtBQURHLEtBQWI7QUFGWTtBQUtiOzs7O3dDQUVtQjtBQUFBLFVBQ1ZDLE1BRFUsR0FDQyxLQUFLQyxLQUROLENBQ1ZELE1BRFUsRUFFbEI7QUFDQTtBQUNBOztBQUNBLFVBQU1ELE1BQU0sR0FBRyxJQUFJTCxZQUFKLG1CQUNWTSxNQURVO0FBRWJFLFFBQUFBLHdCQUF3QixvQkFDbkJOLG1CQURtQixNQUVuQkksTUFBTSxDQUFDRSx3QkFGWTtBQUZYLFNBQWY7QUFPQSxXQUFLQyxRQUFMLENBQWM7QUFDWkosUUFBQUEsTUFBTSxFQUFOQTtBQURZLE9BQWQ7QUFHRDs7OzJDQUVzQjtBQUNyQixXQUFLRCxLQUFMLENBQVdDLE1BQVgsQ0FBa0JLLFFBQWxCO0FBQ0Q7Ozs2QkFFUTtBQUFBLFVBQ0NDLFFBREQsR0FDYyxLQUFLSixLQURuQixDQUNDSSxRQURELEVBR1A7QUFDQTs7QUFDQSxVQUFJLENBQUMsS0FBS1AsS0FBTCxDQUFXQyxNQUFoQixFQUF3QixPQUFPLElBQVAsQ0FMakIsQ0FPUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLDBCQUNFLG9CQUFDLGFBQUQsQ0FBZSxRQUFmO0FBQXdCLFFBQUEsS0FBSyxFQUFFLEtBQUtEO0FBQXBDLFNBQ0dPLFFBREgsQ0FERjtBQUtEOzs7O0VBeEQwQlosUzs7Z0JBQXZCSSxjLGVBQ2U7QUFDakJRLEVBQUFBLFFBQVEsRUFBRWQsU0FBUyxDQUFDZSxJQUFWLENBQWVDLFVBRFI7QUFFakI7QUFDQTtBQUNBUCxFQUFBQSxNQUFNLEVBQUVULFNBQVMsQ0FBQ2lCO0FBSkQsQzs7QUEwRHJCLGVBQWVYLGNBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IFNlYXJjaERyaXZlciB9IGZyb20gXCJAZWxhc3RpYy9zZWFyY2gtdWlcIjtcbmltcG9ydCBTZWFyY2hDb250ZXh0IGZyb20gXCIuL1NlYXJjaENvbnRleHRcIjtcblxuaW1wb3J0IGRlZmF1bHRBMTF5TWVzc2FnZXMgZnJvbSBcIi4vQTExeU5vdGlmaWNhdGlvbnNcIjtcblxuLyoqXG4gKiBUaGUgU2VhcmNoUHJvdmlkZXIgcHJpbWFyaWx5IGhvbGRzIGEgcmVmZXJlbmNlIHRvIHRoZSBTZWFyY2hEcml2ZXIgYW5kXG4gKiBleHBvc2VzIGl0IHRvIHRoZSByZXN0IG9mIHRoZSBhcHBsaWNhdGlvbiBpbiBhIENvbnRleHQuXG4gKi9cbmNsYXNzIFNlYXJjaFByb3ZpZGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcbiAgICAvLyBOb3QgcHJvdmlkaW5nIGEgc2hhcGUgaGVyZSBiZWNhdXNlIHRoZSBzaGFwZSBtYXRjaGVzIHRoZSBzaGFwZSBvZlxuICAgIC8vIFNlYXJjaERyaXZlci4gU2VhcmNoRHJpdmVyIGNhbiBkbyBpdCdzIG93biBwYXJhbWV0ZXIgdmFsaWRhdGlvbi5cbiAgICBjb25maWc6IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBkcml2ZXI6IG51bGxcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyBjb25maWcgfSA9IHRoaXMucHJvcHM7XG4gICAgLy8gVGhpcyBpbml0aWFsaXphdGlvbiBpcyBkb25lIGluc2lkZSBvZiBjb21wb25lbnREaWRNb3VudCwgYmVjYXVzZSBpbml0aWFsaXppbmcgdGhlIFNlYXJjaERyaXZlciBzZXJ2ZXIgc2lkZVxuICAgIC8vIHdpbGwgZXJyb3Igb3V0LCBzaW5jZSB0aGUgZHJpdmVyIGRlcGVuZHMgb24gd2luZG93LiBQbGFjaW5nIHRoZSBpbml0aWFsaXphdGlvbiBpbnNpZGUgb2YgY29tcG9uZW50RGlkTW91bnRcbiAgICAvLyBhc3N1cmVzIHRoYXQgaXQgd29uJ3QgYXR0ZW1wdCB0byBpbml0aWFsaXplIHNlcnZlciBzaWRlLlxuICAgIGNvbnN0IGRyaXZlciA9IG5ldyBTZWFyY2hEcml2ZXIoe1xuICAgICAgLi4uY29uZmlnLFxuICAgICAgYTExeU5vdGlmaWNhdGlvbk1lc3NhZ2VzOiB7XG4gICAgICAgIC4uLmRlZmF1bHRBMTF5TWVzc2FnZXMsXG4gICAgICAgIC4uLmNvbmZpZy5hMTF5Tm90aWZpY2F0aW9uTWVzc2FnZXNcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGRyaXZlclxuICAgIH0pO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5zdGF0ZS5kcml2ZXIudGVhckRvd24oKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgLy8gU2luY2UgZHJpdmVyIGlzIGluaXRpYWxpemVkIGluIGNvbXBvbmVudERpZE1vdW50IGFib3ZlLCB3ZSBhcmUgd2FpdGluZ1xuICAgIC8vIHRvIHJlbmRlciB1bnRpbCB0aGUgZHJpdmVyIGlzIGF2YWlsYWJsZS5cbiAgICBpZiAoIXRoaXMuc3RhdGUuZHJpdmVyKSByZXR1cm4gbnVsbDtcblxuICAgIC8vIFBhc3NpbmcgdGhlIGVudGlyZSBcInRoaXMuc3RhdGVcIiB0byB0aGUgQ29udGV4dCBpcyBzaWduaWZpY2FudC4gQmVjYXVzZVxuICAgIC8vIENvbnRleHQgZGV0ZXJtaW5lcyB3aGVuIHRvIHJlLXJlbmRlciBiYXNlZCBvbiByZWZlcmVudGlhbCBpZGVudGl0eVxuICAgIC8vIHNvbWV0aGluZyBsaWtlIHRoaXMgY291bGQgY2F1c2UgdW5uZWNlc3NhcnkgcmVuZGVyczpcbiAgICAvL1xuICAgIC8vIDxTZWFyY2hDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7ZHJpdmVyOiB0aGlzLnN0YXRlLmRyaXZlcn19PlxuICAgIC8vXG4gICAgLy8gQnkgcGFzc2luZyB0aGUgZW50aXJlIHN0YXRlLCB3ZSBlbnN1cmUgdGhhdCByZS1yZW5kZXJzIG9ubHkgb2NjdXIgd2hlblxuICAgIC8vIHN0YXRlIGlzIGFjdHVhbGx5IHVwZGF0ZWQuXG4gICAgcmV0dXJuIChcbiAgICAgIDxTZWFyY2hDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt0aGlzLnN0YXRlfT5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9TZWFyY2hDb250ZXh0LlByb3ZpZGVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoUHJvdmlkZXI7XG4iXX0=