import PropTypes from "prop-types";
import React from "react";
import { FacetValue, FilterValue } from "./types";
import { appendClassName } from "./view-helpers";

function BooleanFacet(_ref) {
  var className = _ref.className,
      label = _ref.label,
      options = _ref.options,
      onChange = _ref.onChange,
      onRemove = _ref.onRemove,
      values = _ref.values;
  var trueOptions = options.find(function (option) {
    return option.value === "true";
  });
  if (!trueOptions) return null;
  var isSelected = values.includes("true");

  var apply = function apply() {
    return onChange("true");
  };

  var remove = function remove() {
    return onRemove("true");
  };

  var toggle = function toggle() {
    isSelected ? remove() : apply();
  };

  return /*#__PURE__*/React.createElement("fieldset", {
    className: appendClassName("sui-facet", className)
  }, /*#__PURE__*/React.createElement("legend", {
    className: "sui-facet__title"
  }, label), /*#__PURE__*/React.createElement("div", {
    className: "sui-boolean-facet"
  }, /*#__PURE__*/React.createElement("div", {
    className: "sui-boolean-facet__option-input-wrapper"
  }, /*#__PURE__*/React.createElement("label", {
    className: "sui-boolean-facet__option-label"
  }, /*#__PURE__*/React.createElement("div", {
    className: "sui-boolean-facet__option-input-wrapper"
  }, /*#__PURE__*/React.createElement("input", {
    className: "sui-boolean-facet__checkbox",
    type: "checkbox",
    onChange: toggle
  }), /*#__PURE__*/React.createElement("span", {
    className: "sui-boolean-facet__input-text"
  }, label)), /*#__PURE__*/React.createElement("span", {
    className: "sui-boolean-facet__option-count"
  }, trueOptions.count)))));
}

BooleanFacet.propTypes = {
  className: PropTypes.string,
  label: PropTypes.string.isRequired,
  onRemove: PropTypes.func.isRequired,
  options: PropTypes.arrayOf(FacetValue).isRequired,
  values: PropTypes.arrayOf(FilterValue).isRequired,
  onChange: PropTypes.func.isRequired
};
export default BooleanFacet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Cb29sZWFuRmFjZXQuanMiXSwibmFtZXMiOlsiUHJvcFR5cGVzIiwiUmVhY3QiLCJGYWNldFZhbHVlIiwiRmlsdGVyVmFsdWUiLCJhcHBlbmRDbGFzc05hbWUiLCJCb29sZWFuRmFjZXQiLCJjbGFzc05hbWUiLCJsYWJlbCIsIm9wdGlvbnMiLCJvbkNoYW5nZSIsIm9uUmVtb3ZlIiwidmFsdWVzIiwidHJ1ZU9wdGlvbnMiLCJmaW5kIiwib3B0aW9uIiwidmFsdWUiLCJpc1NlbGVjdGVkIiwiaW5jbHVkZXMiLCJhcHBseSIsInJlbW92ZSIsInRvZ2dsZSIsImNvdW50IiwicHJvcFR5cGVzIiwic3RyaW5nIiwiaXNSZXF1aXJlZCIsImZ1bmMiLCJhcnJheU9mIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxTQUFQLE1BQXNCLFlBQXRCO0FBQ0EsT0FBT0MsS0FBUCxNQUFrQixPQUFsQjtBQUVBLFNBQVNDLFVBQVQsRUFBcUJDLFdBQXJCLFFBQXdDLFNBQXhDO0FBQ0EsU0FBU0MsZUFBVCxRQUFnQyxnQkFBaEM7O0FBRUEsU0FBU0MsWUFBVCxPQU9HO0FBQUEsTUFOREMsU0FNQyxRQU5EQSxTQU1DO0FBQUEsTUFMREMsS0FLQyxRQUxEQSxLQUtDO0FBQUEsTUFKREMsT0FJQyxRQUpEQSxPQUlDO0FBQUEsTUFIREMsUUFHQyxRQUhEQSxRQUdDO0FBQUEsTUFGREMsUUFFQyxRQUZEQSxRQUVDO0FBQUEsTUFEREMsTUFDQyxRQUREQSxNQUNDO0FBQ0QsTUFBTUMsV0FBVyxHQUFHSixPQUFPLENBQUNLLElBQVIsQ0FBYSxVQUFBQyxNQUFNO0FBQUEsV0FBSUEsTUFBTSxDQUFDQyxLQUFQLEtBQWlCLE1BQXJCO0FBQUEsR0FBbkIsQ0FBcEI7QUFDQSxNQUFJLENBQUNILFdBQUwsRUFBa0IsT0FBTyxJQUFQO0FBQ2xCLE1BQU1JLFVBQVUsR0FBR0wsTUFBTSxDQUFDTSxRQUFQLENBQWdCLE1BQWhCLENBQW5COztBQUVBLE1BQU1DLEtBQUssR0FBRyxTQUFSQSxLQUFRO0FBQUEsV0FBTVQsUUFBUSxDQUFDLE1BQUQsQ0FBZDtBQUFBLEdBQWQ7O0FBQ0EsTUFBTVUsTUFBTSxHQUFHLFNBQVRBLE1BQVM7QUFBQSxXQUFNVCxRQUFRLENBQUMsTUFBRCxDQUFkO0FBQUEsR0FBZjs7QUFDQSxNQUFNVSxNQUFNLEdBQUcsU0FBVEEsTUFBUyxHQUFNO0FBQ25CSixJQUFBQSxVQUFVLEdBQUdHLE1BQU0sRUFBVCxHQUFjRCxLQUFLLEVBQTdCO0FBQ0QsR0FGRDs7QUFJQSxzQkFDRTtBQUFVLElBQUEsU0FBUyxFQUFFZCxlQUFlLENBQUMsV0FBRCxFQUFjRSxTQUFkO0FBQXBDLGtCQUNFO0FBQVEsSUFBQSxTQUFTLEVBQUM7QUFBbEIsS0FBc0NDLEtBQXRDLENBREYsZUFFRTtBQUFLLElBQUEsU0FBUyxFQUFDO0FBQWYsa0JBQ0U7QUFBSyxJQUFBLFNBQVMsRUFBRTtBQUFoQixrQkFDRTtBQUFPLElBQUEsU0FBUyxFQUFDO0FBQWpCLGtCQUNFO0FBQUssSUFBQSxTQUFTLEVBQUM7QUFBZixrQkFDRTtBQUNFLElBQUEsU0FBUyxFQUFDLDZCQURaO0FBRUUsSUFBQSxJQUFJLEVBQUMsVUFGUDtBQUdFLElBQUEsUUFBUSxFQUFFYTtBQUhaLElBREYsZUFNRTtBQUFNLElBQUEsU0FBUyxFQUFDO0FBQWhCLEtBQWlEYixLQUFqRCxDQU5GLENBREYsZUFTRTtBQUFNLElBQUEsU0FBUyxFQUFDO0FBQWhCLEtBQ0dLLFdBQVcsQ0FBQ1MsS0FEZixDQVRGLENBREYsQ0FERixDQUZGLENBREY7QUFzQkQ7O0FBRURoQixZQUFZLENBQUNpQixTQUFiLEdBQXlCO0FBQ3ZCaEIsRUFBQUEsU0FBUyxFQUFFTixTQUFTLENBQUN1QixNQURFO0FBRXZCaEIsRUFBQUEsS0FBSyxFQUFFUCxTQUFTLENBQUN1QixNQUFWLENBQWlCQyxVQUZEO0FBR3ZCZCxFQUFBQSxRQUFRLEVBQUVWLFNBQVMsQ0FBQ3lCLElBQVYsQ0FBZUQsVUFIRjtBQUl2QmhCLEVBQUFBLE9BQU8sRUFBRVIsU0FBUyxDQUFDMEIsT0FBVixDQUFrQnhCLFVBQWxCLEVBQThCc0IsVUFKaEI7QUFLdkJiLEVBQUFBLE1BQU0sRUFBRVgsU0FBUyxDQUFDMEIsT0FBVixDQUFrQnZCLFdBQWxCLEVBQStCcUIsVUFMaEI7QUFNdkJmLEVBQUFBLFFBQVEsRUFBRVQsU0FBUyxDQUFDeUIsSUFBVixDQUFlRDtBQU5GLENBQXpCO0FBU0EsZUFBZW5CLFlBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IEZhY2V0VmFsdWUsIEZpbHRlclZhbHVlIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IGFwcGVuZENsYXNzTmFtZSB9IGZyb20gXCIuL3ZpZXctaGVscGVyc1wiO1xuXG5mdW5jdGlvbiBCb29sZWFuRmFjZXQoe1xuICBjbGFzc05hbWUsXG4gIGxhYmVsLFxuICBvcHRpb25zLFxuICBvbkNoYW5nZSxcbiAgb25SZW1vdmUsXG4gIHZhbHVlc1xufSkge1xuICBjb25zdCB0cnVlT3B0aW9ucyA9IG9wdGlvbnMuZmluZChvcHRpb24gPT4gb3B0aW9uLnZhbHVlID09PSBcInRydWVcIik7XG4gIGlmICghdHJ1ZU9wdGlvbnMpIHJldHVybiBudWxsO1xuICBjb25zdCBpc1NlbGVjdGVkID0gdmFsdWVzLmluY2x1ZGVzKFwidHJ1ZVwiKTtcblxuICBjb25zdCBhcHBseSA9ICgpID0+IG9uQ2hhbmdlKFwidHJ1ZVwiKTtcbiAgY29uc3QgcmVtb3ZlID0gKCkgPT4gb25SZW1vdmUoXCJ0cnVlXCIpO1xuICBjb25zdCB0b2dnbGUgPSAoKSA9PiB7XG4gICAgaXNTZWxlY3RlZCA/IHJlbW92ZSgpIDogYXBwbHkoKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxmaWVsZHNldCBjbGFzc05hbWU9e2FwcGVuZENsYXNzTmFtZShcInN1aS1mYWNldFwiLCBjbGFzc05hbWUpfT5cbiAgICAgIDxsZWdlbmQgY2xhc3NOYW1lPVwic3VpLWZhY2V0X190aXRsZVwiPntsYWJlbH08L2xlZ2VuZD5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3VpLWJvb2xlYW4tZmFjZXRcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wic3VpLWJvb2xlYW4tZmFjZXRfX29wdGlvbi1pbnB1dC13cmFwcGVyXCJ9PlxuICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJzdWktYm9vbGVhbi1mYWNldF9fb3B0aW9uLWxhYmVsXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN1aS1ib29sZWFuLWZhY2V0X19vcHRpb24taW5wdXQtd3JhcHBlclwiPlxuICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzdWktYm9vbGVhbi1mYWNldF9fY2hlY2tib3hcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RvZ2dsZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwic3VpLWJvb2xlYW4tZmFjZXRfX2lucHV0LXRleHRcIj57bGFiZWx9PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJzdWktYm9vbGVhbi1mYWNldF9fb3B0aW9uLWNvdW50XCI+XG4gICAgICAgICAgICAgIHt0cnVlT3B0aW9ucy5jb3VudH1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmllbGRzZXQ+XG4gICk7XG59XG5cbkJvb2xlYW5GYWNldC5wcm9wVHlwZXMgPSB7XG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgbGFiZWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgb25SZW1vdmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9wdGlvbnM6IFByb3BUeXBlcy5hcnJheU9mKEZhY2V0VmFsdWUpLmlzUmVxdWlyZWQsXG4gIHZhbHVlczogUHJvcFR5cGVzLmFycmF5T2YoRmlsdGVyVmFsdWUpLmlzUmVxdWlyZWQsXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59O1xuXG5leHBvcnQgZGVmYXVsdCBCb29sZWFuRmFjZXQ7XG4iXX0=