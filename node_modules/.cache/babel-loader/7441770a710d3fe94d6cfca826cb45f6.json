{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Select from \"react-select\";\nimport { appendClassName } from \"./view-helpers\";\nvar setDefaultStyle = {\n  option: function option() {\n    return {};\n  },\n  control: function control() {\n    return {};\n  },\n  dropdownIndicator: function dropdownIndicator() {\n    return {};\n  },\n  indicatorSeparator: function indicatorSeparator() {\n    return {};\n  },\n  singleValue: function singleValue(provided) {\n    // Pulling out CSS that we don't want\n    // eslint-disable-next-line no-unused-vars\n    var position = provided.position,\n        top = provided.top,\n        transform = provided.transform,\n        maxWidth = provided.maxWidth,\n        rest = _objectWithoutProperties(provided, [\"position\", \"top\", \"transform\", \"maxWidth\"]);\n\n    return _objectSpread({}, rest, {\n      lineHeight: 1,\n      marginRight: 0\n    });\n  },\n  valueContainer: function valueContainer(provided) {\n    return _objectSpread({}, provided, {\n      paddingRight: 0\n    });\n  }\n};\n\nvar wrapOption = function wrapOption(option) {\n  return {\n    label: option,\n    value: option\n  };\n};\n\nfunction ResultsPerPage(_ref) {\n  var className = _ref.className,\n      _onChange = _ref.onChange,\n      options = _ref.options,\n      selectedValue = _ref.value,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"onChange\", \"options\", \"value\"]);\n\n  var selectedOption = null;\n\n  if (selectedValue) {\n    selectedOption = wrapOption(selectedValue);\n    if (!options.includes(selectedValue)) options = [selectedValue].concat(_toConsumableArray(options));\n  }\n\n  return (\n    /*#__PURE__*/\n    React.createElement(\"div\", _extends({\n      className: appendClassName(\"sui-results-per-page\", className)\n    }, rest),\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: \"sui-results-per-page__label\"\n    }, \"Show\"),\n    /*#__PURE__*/\n    React.createElement(Select, {\n      className: \"sui-select sui-select--inline\",\n      classNamePrefix: \"sui-select\",\n      value: selectedOption,\n      onChange: function onChange(o) {\n        return _onChange(o.value);\n      },\n      options: options.map(wrapOption),\n      isSearchable: false,\n      styles: setDefaultStyle\n    }))\n  );\n}\n\nResultsPerPage.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(PropTypes.number).isRequired,\n  className: PropTypes.string,\n  value: PropTypes.number\n};\nexport default ResultsPerPage;","map":null,"metadata":{},"sourceType":"module"}