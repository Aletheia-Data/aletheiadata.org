{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport deepEqual from \"deep-equal\";\n/**\n * Given a list of applied Filters, find FilterValues based on\n * \"fieldName\" and \"filterType\".\n *\n * @param {*} filters\n * @param {*} name\n * @param {*} filterType\n */\n\nexport function findFilterValues(filters, name, filterType) {\n  var filter = filters.find(function (f) {\n    return f.field === name && f.type === filterType;\n  });\n  if (!filter) return [];\n  return filter.values;\n}\n/**\n * Given a list of applied Filters, remove a single FilterValue based on\n * \"fieldName\" and \"filterType\".\n *\n * @param {Filter[]} filters\n * @param {String} fieldName\n * @param {FilterValue} value\n * @param {FilterType} filterType\n */\n\nexport function removeSingleFilterValue(filters, fieldName, value, filterType) {\n  return filters.reduce(function (acc, filter) {\n    var field = filter.field,\n        values = filter.values,\n        type = filter.type,\n        rest = _objectWithoutProperties(filter, [\"field\", \"values\", \"type\"]);\n\n    if (field === fieldName && (!filterType || type === filterType)) {\n      var updatedFilterValues = values.filter(function (filterValue) {\n        return !doFilterValuesMatch(filterValue, value);\n      });\n\n      if (updatedFilterValues.length > 0) {\n        return acc.concat(_objectSpread({\n          field: field,\n          values: updatedFilterValues,\n          type: type\n        }, rest));\n      } else {\n        return acc;\n      }\n    }\n\n    return acc.concat(filter);\n  }, []);\n}\n/**\n * Given a Facet and a list of applied Filters, mark the Facet Values\n * for that Facet as \"selected\" based on \"fieldName\" and \"filterType\".\n *\n * @param {Facet} facet\n * @param {String} fieldName\n * @param {Filter[]} filters\n * @param {FilterType} filterType\n */\n\nexport function markSelectedFacetValuesFromFilters(facet, filters, fieldName, filterType) {\n  var facetValues = facet.data;\n  var filterValuesForField = findFilterValues(filters, fieldName, filterType) || [];\n  return _objectSpread({}, facet, {\n    data: facetValues.map(function (facetValue) {\n      return _objectSpread({}, facetValue, {\n        selected: filterValuesForField.some(function (filterValue) {\n          return doFilterValuesMatch(filterValue, facetValue.value);\n        })\n      });\n    })\n  });\n}\n/**\n * Useful for determining when filter values match. This could be used\n * when matching applied filters back to facet options, or for determining\n * whether or not a filter already exists in a list of applied filters.\n *\n * @param {FilterValue} filterValue1\n * @param {FilterValue} filterValue2\n */\n\nexport function doFilterValuesMatch(filterValue1, filterValue2) {\n  if (filterValue1 && filterValue1.name && filterValue2 && filterValue2.name && filterValue1.name === filterValue2.name) // If two filters have matching names, then they are the same filter, there\n    // is no need to do a more expensive deep equal comparison.\n    //\n    // This is also important because certain filters and facets will have\n    // differing values than their corresponding facet options. For instance,\n    // consider a time-based facet like \"Last 10 Minutes\". The value of the\n    // filter will be different depending on when it was selected, but the name\n    // will always match.\n    return true; // We use 'strict = true' to do a '===' of leaves, rather than '=='\n\n  return deepEqual(filterValue1, filterValue2, {\n    strict: true\n  });\n}","map":null,"metadata":{},"sourceType":"module"}