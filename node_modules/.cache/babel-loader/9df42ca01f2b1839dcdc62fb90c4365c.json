{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.ElasticAppSearch = {});\n})(this, function (exports) {\n  'use strict';\n\n  var classCallCheck = function classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var defineProperty = function defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  };\n\n  var _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  var objectWithoutProperties = function objectWithoutProperties(obj, keys) {\n    var target = {};\n\n    for (var i in obj) {\n      if (keys.indexOf(i) >= 0) continue;\n      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n      target[i] = obj[i];\n    }\n\n    return target;\n  };\n\n  var slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n\n  var toArray = function toArray(arr) {\n    return Array.isArray(arr) ? arr : Array.from(arr);\n  };\n\n  var toConsumableArray = function toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  };\n  /**\n   * An individual search result\n   */\n\n\n  var ResultItem = function () {\n    function ResultItem(data) {\n      classCallCheck(this, ResultItem);\n\n      if (data._group && data._group.length > 0) {\n        data = _extends({}, data, {\n          _group: data._group.map(function (nestedData) {\n            return new ResultItem(nestedData);\n          })\n        });\n      }\n\n      this.data = data;\n    }\n    /**\n     * Return the HTML-unsafe raw value for a field, if it exists\n     *\n     * @param {String} key - name of the field\n     *\n     * @returns {any} the raw value of the field\n     */\n\n\n    createClass(ResultItem, [{\n      key: \"getRaw\",\n      value: function getRaw(key) {\n        return (this.data[key] || {}).raw;\n      }\n      /**\n       * Return the HTML-safe snippet value for a field, if it exists\n       *\n       * @param {String} key - name of the field\n       *\n       * @returns {any} the snippet value of the field\n       */\n\n    }, {\n      key: \"getSnippet\",\n      value: function getSnippet(key) {\n        return (this.data[key] || {}).snippet;\n      }\n    }]);\n    return ResultItem;\n  }();\n  /**\n   * A list of ResultItems and additional information returned by a search request\n   */\n\n\n  var ResultList = function ResultList(rawResults, rawInfo) {\n    classCallCheck(this, ResultList);\n    this.rawResults = rawResults;\n    this.rawInfo = rawInfo;\n    var results = new Array();\n    rawResults.forEach(function (data) {\n      results.push(new ResultItem(data));\n    });\n    this.results = results;\n    this.info = rawInfo;\n  };\n  /**\n   * A helper for working with the JSON structure which represent\n   * filters in API requests.\n   */\n\n\n  var Filters = function () {\n    function Filters() {\n      var filtersJSON = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      classCallCheck(this, Filters);\n      this.filtersJSON = filtersJSON;\n    }\n\n    createClass(Filters, [{\n      key: \"removeFilter\",\n      value: function removeFilter(filterKey) {\n        var filtersMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.filtersJSON;\n\n        function go(filterKey, filtersMap) {\n          var filtered = Object.entries(filtersMap).reduce(function (acc, _ref) {\n            var _ref2 = slicedToArray(_ref, 2),\n                filterName = _ref2[0],\n                filterValue = _ref2[1];\n\n            if (filterName === filterKey) {\n              return acc;\n            }\n\n            if ([\"all\", \"any\", \"none\"].includes(filterName)) {\n              var nestedFiltersArray = filterValue;\n              filterValue = nestedFiltersArray.reduce(function (acc, nestedFiltersMap) {\n                var updatedNestedFiltersMap = go(filterKey, nestedFiltersMap);\n\n                if (updatedNestedFiltersMap) {\n                  return acc.concat(updatedNestedFiltersMap);\n                } else {\n                  return acc;\n                }\n              }, []);\n            }\n\n            return _extends({}, acc, defineProperty({}, filterName, filterValue));\n          }, {});\n\n          if (Object.keys(filtered).length === 0) {\n            return;\n          }\n\n          return filtered;\n        }\n\n        var filtered = go(filterKey, filtersMap);\n        return new Filters(filtered);\n      }\n    }, {\n      key: \"getListOfAppliedFilters\",\n      value: function getListOfAppliedFilters() {\n        var _this = this;\n\n        var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.filtersJSON;\n        var set$$1 = Object.entries(filters).reduce(function (acc, _ref3) {\n          var _ref4 = slicedToArray(_ref3, 2),\n              key = _ref4[0],\n              value = _ref4[1];\n\n          if (![\"all\", \"any\", \"none\"].includes(key)) {\n            acc.add(key);\n          } else {\n            value.forEach(function (nestedValue) {\n              Object.keys(nestedValue).forEach(function (nestedKey) {\n                if (![\"all\", \"any\", \"none\"].includes(nestedKey)) {\n                  acc.add(nestedKey);\n                } else {\n                  acc = new Set([].concat(toConsumableArray(acc), toConsumableArray(_this.getListOfAppliedFilters(nestedValue))));\n                }\n              });\n            });\n          }\n\n          return acc;\n        }, new Set());\n        return Array.from(set$$1.values());\n      }\n    }]);\n    return Filters;\n  }();\n\n  var version = \"7.6.0\";\n\n  var QueryCache = function () {\n    function QueryCache() {\n      classCallCheck(this, QueryCache);\n      this.cache = {};\n    }\n\n    createClass(QueryCache, [{\n      key: \"getKey\",\n      value: function getKey(method, url, params) {\n        return method + url + JSON.stringify(params);\n      }\n    }, {\n      key: \"store\",\n      value: function store(key, response) {\n        this.cache[key] = response;\n      }\n    }, {\n      key: \"retrieve\",\n      value: function retrieve(key) {\n        return this.cache[key];\n      }\n    }]);\n    return QueryCache;\n  }();\n\n  var cache = new QueryCache();\n\n  function request(searchKey, apiEndpoint, path, params, cacheResponses) {\n    var _ref = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {},\n        additionalHeaders = _ref.additionalHeaders;\n\n    var method = \"POST\";\n    var key = cache.getKey(method, apiEndpoint + path, params);\n\n    if (cacheResponses) {\n      var cachedResult = cache.retrieve(key);\n\n      if (cachedResult) {\n        return Promise.resolve(cachedResult);\n      }\n    }\n\n    return _request(method, searchKey, apiEndpoint, path, params, {\n      additionalHeaders: additionalHeaders\n    }).then(function (response) {\n      return response.json().then(function (json) {\n        var result = {\n          response: response,\n          json: json\n        };\n        if (cacheResponses) cache.store(key, result);\n        return result;\n      }).catch(function () {\n        return {\n          response: response,\n          json: {}\n        };\n      });\n    });\n  }\n\n  function _request(method, searchKey, apiEndpoint, path, params) {\n    var _ref2 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {},\n        additionalHeaders = _ref2.additionalHeaders;\n\n    var headers = new Headers(_extends({\n      Authorization: \"Bearer \" + searchKey,\n      \"Content-Type\": \"application/json\",\n      \"X-Swiftype-Client\": \"elastic-app-search-javascript\",\n      \"X-Swiftype-Client-Version\": version\n    }, additionalHeaders));\n    return fetch(\"\" + apiEndpoint + path, {\n      method: method,\n      headers: headers,\n      body: JSON.stringify(params),\n      credentials: \"include\"\n    });\n  }\n\n  var SEARCH_TYPES = {\n    SEARCH: \"SEARCH\",\n    MULTI_SEARCH: \"MULTI_SEARCH\"\n  };\n  /**\n   * Omit a single key from an object\n   */\n\n  function omit(obj, keyToOmit) {\n    if (!obj) return;\n    var _ = obj[keyToOmit],\n        rest = objectWithoutProperties(obj, [keyToOmit]);\n    return rest;\n  }\n\n  function flatten(arrayOfArrays) {\n    return [].concat.apply([], arrayOfArrays);\n  }\n\n  function formatResultsJSON(json) {\n    return new ResultList(json.results, omit(json, \"results\"));\n  }\n\n  function handleErrorResponse(_ref) {\n    var response = _ref.response,\n        json = _ref.json;\n\n    if (!response.ok) {\n      var message = Array.isArray(json) ? \" \" + flatten(json.map(function (response) {\n        return response.errors;\n      })).join(\", \") : \"\" + (json.errors ? \" \" + json.errors : \"\");\n      throw new Error(\"[\" + response.status + \"]\" + message);\n    }\n\n    return json;\n  }\n\n  var Client = function () {\n    function Client(hostIdentifier, searchKey, engineName) {\n      var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n          _ref2$endpointBase = _ref2.endpointBase,\n          endpointBase = _ref2$endpointBase === undefined ? \"\" : _ref2$endpointBase,\n          _ref2$cacheResponses = _ref2.cacheResponses,\n          cacheResponses = _ref2$cacheResponses === undefined ? true : _ref2$cacheResponses,\n          additionalHeaders = _ref2.additionalHeaders;\n\n      classCallCheck(this, Client);\n      this.additionalHeaders = additionalHeaders;\n      this.searchKey = searchKey;\n      this.cacheResponses = cacheResponses;\n      this.engineName = engineName;\n      this.apiEndpoint = endpointBase ? endpointBase + \"/api/as/v1/\" : \"https://\" + hostIdentifier + \".api.swiftype.com/api/as/v1/\";\n      this.searchPath = \"engines/\" + this.engineName + \"/search\";\n      this.multiSearchPath = \"engines/\" + this.engineName + \"/multi_search\";\n      this.querySuggestionPath = \"engines/\" + this.engineName + \"/query_suggestion\";\n      this.clickPath = \"engines/\" + this.engineName + \"/click\";\n    }\n    /**\n     * Sends a query suggestion request to the Elastic App Search Api\n     *\n     * @param {String} query String that is used to perform a query suggest.\n     * @param {Object} options Object used for configuring the query suggest, like 'types' or 'size'\n     * @returns {Promise<ResultList>} a Promise that returns results, otherwise throws an Error.\n     */\n\n\n    createClass(Client, [{\n      key: \"querySuggestion\",\n      value: function querySuggestion(query) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var params = Object.assign({\n          query: query\n        }, options);\n        return request(this.searchKey, this.apiEndpoint, this.querySuggestionPath, params, this.cacheResponses, {\n          additionalHeaders: this.additionalHeaders\n        }).then(handleErrorResponse);\n      }\n      /**\n       * Sends a search request to the Elastic App Search Api\n       *\n       * @param {String} query String, Query, or Object that is used to perform a search request.\n       * @param {Object} options Object used for configuring the search like search_fields and result_fields\n       * @returns {Promise<ResultList>} a Promise that returns a {ResultList} when resolved, otherwise throws an Error.\n       */\n\n    }, {\n      key: \"search\",\n      value: function search(query) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var disjunctiveFacets = options.disjunctiveFacets,\n            disjunctiveFacetsAnalyticsTags = options.disjunctiveFacetsAnalyticsTags,\n            validOptions = objectWithoutProperties(options, [\"disjunctiveFacets\", \"disjunctiveFacetsAnalyticsTags\"]);\n        var params = Object.assign({\n          query: query\n        }, validOptions);\n\n        if (disjunctiveFacets && disjunctiveFacets.length > 0) {\n          return this._performDisjunctiveSearch(params, disjunctiveFacets, disjunctiveFacetsAnalyticsTags).then(formatResultsJSON);\n        }\n\n        return this._performSearch(params).then(formatResultsJSON);\n      }\n      /**\n       * Sends multiple search requests to the Elastic App Search Api, using the\n       * \"multi_search\" endpoint\n       *\n       * @param {Array[Object]} searches searches to send, valid keys are:\n       * - query: String\n       * - options: Object (optional)\n       * @returns {Promise<[ResultList]>} a Promise that returns an array of {ResultList} when resolved, otherwise throws an Error.\n       */\n\n    }, {\n      key: \"multiSearch\",\n      value: function multiSearch(searches) {\n        var params = searches.map(function (search) {\n          return _extends({\n            query: search.query\n          }, search.options || {});\n        });\n        return this._performSearch({\n          queries: params\n        }, SEARCH_TYPES.MULTI_SEARCH).then(function (responses) {\n          return responses.map(formatResultsJSON);\n        });\n      }\n      /*\n       * A disjunctive search, as opposed to a regular search is used any time\n       * a `disjunctiveFacet` option is provided to the `search` method. A\n       * a disjunctive facet requires multiple API calls.\n       *\n       * Typically:\n       *\n       * 1 API call to get the base results\n       * 1 additional API call to get the \"disjunctive\" facet counts for each\n       * facet configured as \"disjunctive\".\n       *\n       * The additional API calls are required, because a \"disjunctive\" facet\n       * is one where we want the counts for a facet as if there is no filter applied\n       * to a particular field.\n       *\n       * After all queries are performed, we merge the facet values on the\n       * additional requests into the facet values of the original request, thus\n       * creating a single response with the disjunctive facet values.\n       */\n\n    }, {\n      key: \"_performDisjunctiveSearch\",\n      value: function _performDisjunctiveSearch(params, disjunctiveFacets) {\n        var _this = this;\n\n        var disjunctiveFacetsAnalyticsTags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [\"Facet-Only\"];\n\n        var baseQueryPromise = this._performSearch(params);\n\n        var filters = new Filters(params.filters);\n        var appliedFilers = filters.getListOfAppliedFilters();\n        var listOfAppliedDisjunctiveFilters = appliedFilers.filter(function (filter) {\n          return disjunctiveFacets.includes(filter);\n        });\n\n        if (!listOfAppliedDisjunctiveFilters.length) {\n          return baseQueryPromise;\n        }\n\n        var page = params.page || {}; // We intentionally drop passed analytics tags here so that we don't get\n        // double counted search analytics in the dashboard from disjunctive\n        // calls\n\n        var analytics = params.analytics || {};\n        analytics.tags = disjunctiveFacetsAnalyticsTags;\n        var disjunctiveQueriesPromises = listOfAppliedDisjunctiveFilters.map(function (appliedDisjunctiveFilter) {\n          return _this._performSearch(_extends({}, params, {\n            filters: filters.removeFilter(appliedDisjunctiveFilter).filtersJSON,\n            page: _extends({}, page, {\n              // Set this to 0 for performance, since disjunctive queries\n              // don't need results\n              size: 0\n            }),\n            analytics: analytics,\n            facets: defineProperty({}, appliedDisjunctiveFilter, params.facets[appliedDisjunctiveFilter])\n          }));\n        });\n        return Promise.all([baseQueryPromise].concat(toConsumableArray(disjunctiveQueriesPromises))).then(function (_ref3) {\n          var _ref4 = toArray(_ref3),\n              baseQueryResults = _ref4[0],\n              disjunctiveQueries = _ref4.slice(1);\n\n          disjunctiveQueries.forEach(function (disjunctiveQueryResults) {\n            var _Object$entries$ = slicedToArray(Object.entries(disjunctiveQueryResults.facets)[0], 2),\n                facetName = _Object$entries$[0],\n                facetValue = _Object$entries$[1];\n\n            baseQueryResults.facets[facetName] = facetValue;\n          });\n          return baseQueryResults;\n        });\n      }\n    }, {\n      key: \"_performSearch\",\n      value: function _performSearch(params) {\n        var searchType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SEARCH_TYPES.SEARCH;\n        var searchPath = searchType === SEARCH_TYPES.MULTI_SEARCH ? this.multiSearchPath : this.searchPath;\n        return request(this.searchKey, this.apiEndpoint, searchPath + \".json\", params, this.cacheResponses, {\n          additionalHeaders: this.additionalHeaders\n        }).then(handleErrorResponse);\n      }\n      /**\n       * Sends a click event to the Elastic App Search Api, to track a click-through event\n       *\n       * @param {String} query Query that was used to perform the search request\n       * @param {String} documentId ID of the document that was clicked\n       * @param {String} requestId Request_id from search response\n       * @param {String[]} tags Tags to categorize this request in the Dashboard\n       * @returns {Promise} An empty Promise, otherwise throws an Error.\n       */\n\n    }, {\n      key: \"click\",\n      value: function click(_ref5) {\n        var query = _ref5.query,\n            documentId = _ref5.documentId,\n            requestId = _ref5.requestId,\n            _ref5$tags = _ref5.tags,\n            tags = _ref5$tags === undefined ? [] : _ref5$tags;\n        var params = {\n          query: query,\n          document_id: documentId,\n          request_id: requestId,\n          tags: tags\n        };\n        return request(this.searchKey, this.apiEndpoint, this.clickPath + \".json\", params, this.cacheResponses, {\n          additionalHeaders: this.additionalHeaders\n        }).then(handleErrorResponse);\n      }\n    }]);\n    return Client;\n  }();\n\n  function createClient(_ref) {\n    var hostIdentifier = _ref.hostIdentifier,\n        accountHostKey = _ref.accountHostKey,\n        apiKey = _ref.apiKey,\n        searchKey = _ref.searchKey,\n        engineName = _ref.engineName,\n        endpointBase = _ref.endpointBase,\n        cacheResponses = _ref.cacheResponses,\n        additionalHeaders = _ref.additionalHeaders;\n    hostIdentifier = hostIdentifier || accountHostKey; // accountHostKey is deprecated\n\n    searchKey = searchKey || apiKey; //apiKey is deprecated\n\n    return new Client(hostIdentifier, searchKey, engineName, {\n      endpointBase: endpointBase,\n      cacheResponses: cacheResponses,\n      additionalHeaders: additionalHeaders\n    });\n  }\n\n  exports.createClient = createClient;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}