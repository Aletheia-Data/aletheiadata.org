{"ast":null,"code":"function isTypeNumber(value) {\n  return value !== undefined && value !== null && typeof value === \"number\";\n}\n\nfunction isTypeBoolean(value) {\n  return value && typeof value === \"boolean\";\n}\n\nfunction toBoolean(value) {\n  if (value === \"true\") return true;\n  if (value === \"false\") return false;\n  throw \"Invalid type parsed as Boolean value\";\n}\n/* Encoder for qs library which preserve number types on the URL. Numbers\nare padded with \"n_{number}_n\", and booleans with \"b_{boolean}_b\"*/\n\n\nexport default {\n  encode: function encode(value, _encode) {\n    if (isTypeNumber(value)) {\n      return \"n_\".concat(value, \"_n\");\n    }\n\n    if (isTypeBoolean(value)) {\n      return \"b_\".concat(value, \"_b\");\n    }\n\n    return _encode(value);\n  },\n  decode: function decode(value, _decode) {\n    //eslint-disable-next-line\n    if (/n_-?[\\d\\.]*_n/.test(value)) {\n      var numericValueString = value.substring(2, value.length - 2);\n      return Number(numericValueString);\n    }\n\n    if (/^b_(true|false)*_b$/.test(value)) {\n      var booleanValueString = value.substring(2, value.length - 2);\n      return toBoolean(booleanValueString);\n    }\n\n    return _decode(value);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}