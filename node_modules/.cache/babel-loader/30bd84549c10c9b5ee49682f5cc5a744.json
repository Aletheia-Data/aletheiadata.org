{"ast":null,"code":"import _toConsumableArray from \"/Users/enzojuniorvezzaro/GITHUB/aletheiadata.org/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport config from \"../config/engine.json\";\n/**\n * This file abstracts most logic around the configuration of the Reference UI.\n *\n * Configuration is an important part of the \"reusability\" and \"generic-ness\" of\n * the Reference UI, but if you are using this app as a starting point for own\n * project, everything related to configuration can largely be thrown away. To\n * that end, this file attempts to contain most of that logic to one place.\n */\n\nexport function getConfig() {\n  if (process.env.NODE_ENV === \"test\") {\n    return {};\n  }\n\n  if (config.engineName) return config;\n\n  if (typeof window !== \"undefined\" && window.appConfig && window.appConfig.engineName) {\n    return window.appConfig;\n  }\n\n  return {};\n}\n\nfunction toLowerCase(string) {\n  if (string) return string.toLowerCase();\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport function getTitleField() {\n  // If no title field configuration has been provided, we attempt\n  // to use a \"title\" field, if one exists\n  return getConfig().titleField || \"title\";\n}\nexport function getUrlField() {\n  return getConfig().urlField;\n}\nexport function getFacetFields() {\n  return getConfig().facets || [];\n}\nexport function getSortFields() {\n  return getConfig().sortFields || [];\n}\nexport function getResultTitle(result) {\n  var titleField = getTitleField();\n  return result.getSnippet(titleField);\n} // Because if a field is configured to display as a \"title\", we don't want\n// to display it again in the fields list\n\nexport function stripUnnecessaryResultFields(resultFields) {\n  return Object.keys(resultFields).reduce(function (acc, n) {\n    if ([\"_meta\", \"id\", toLowerCase(getTitleField()), toLowerCase(getUrlField())].includes(toLowerCase(n))) {\n      return acc;\n    }\n\n    acc[n] = resultFields[n];\n    return acc;\n  }, {});\n}\nexport function buildSearchOptionsFromConfig() {\n  var config = getConfig();\n  var searchFields = (config.searchFields || config.fields || []).reduce(function (acc, n) {\n    acc = acc || {};\n    acc[n] = {};\n    return acc;\n  }, undefined);\n  var resultFields = (config.resultFields || config.fields || []).reduce(function (acc, n) {\n    acc = acc || {};\n    acc[n] = {\n      raw: {},\n      snippet: {\n        size: 100,\n        fallback: true\n      }\n    };\n    return acc;\n  }, undefined); // We can't use url or title fields unless they're actually\n  // in the reuslts.\n\n  if (config.urlField) {\n    resultFields[config.urlField] = {\n      raw: {},\n      snippet: {\n        size: 100,\n        fallback: true\n      }\n    };\n  }\n\n  if (config.titleField) {\n    resultFields[config.titleField] = {\n      raw: {},\n      snippet: {\n        size: 100,\n        fallback: true\n      }\n    };\n  }\n\n  var searchOptions = {};\n  searchOptions.result_fields = resultFields;\n  searchOptions.search_fields = searchFields;\n  return searchOptions;\n}\nexport function buildFacetConfigFromConfig() {\n  var config = getConfig();\n  console.log(config);\n  var facets = (config.facets || []).reduce(function (acc, n) {\n    acc = acc || {};\n    acc[n] = {\n      type: \"value\",\n      size: 100\n    };\n    return acc;\n  }, undefined);\n  return facets;\n}\nexport function buildSortOptionsFromConfig() {\n  var config = getConfig();\n  return [{\n    name: \"Relevance\",\n    value: \"\",\n    direction: \"\"\n  }].concat(_toConsumableArray((config.sortFields || []).reduce(function (acc, sortField) {\n    acc.push({\n      name: \"\".concat(capitalizeFirstLetter(sortField), \" ASC\"),\n      value: sortField,\n      direction: \"asc\"\n    });\n    acc.push({\n      name: \"\".concat(capitalizeFirstLetter(sortField), \" DESC\"),\n      value: sortField,\n      direction: \"desc\"\n    });\n    return acc;\n  }, [])));\n}\nexport function buildAutocompleteQueryConfig() {\n  var querySuggestFields = getConfig().querySuggestFields;\n\n  if (!querySuggestFields || !Array.isArray(querySuggestFields) || querySuggestFields.length === 0) {\n    return {};\n  }\n\n  return {\n    suggestions: {\n      types: {\n        documents: {\n          fields: getConfig().querySuggestFields\n        }\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/Users/enzojuniorvezzaro/GITHUB/aletheiadata.org/src/config/config-helper.js"],"names":["config","getConfig","process","env","NODE_ENV","engineName","window","appConfig","toLowerCase","string","capitalizeFirstLetter","charAt","toUpperCase","slice","getTitleField","titleField","getUrlField","urlField","getFacetFields","facets","getSortFields","sortFields","getResultTitle","result","getSnippet","stripUnnecessaryResultFields","resultFields","Object","keys","reduce","acc","n","includes","buildSearchOptionsFromConfig","searchFields","fields","undefined","raw","snippet","size","fallback","searchOptions","result_fields","search_fields","buildFacetConfigFromConfig","console","log","type","buildSortOptionsFromConfig","name","value","direction","sortField","push","buildAutocompleteQueryConfig","querySuggestFields","Array","isArray","length","suggestions","types","documents"],"mappings":"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","sourcesContent":["import config from \"../config/engine.json\";\n\n/**\n * This file abstracts most logic around the configuration of the Reference UI.\n *\n * Configuration is an important part of the \"reusability\" and \"generic-ness\" of\n * the Reference UI, but if you are using this app as a starting point for own\n * project, everything related to configuration can largely be thrown away. To\n * that end, this file attempts to contain most of that logic to one place.\n */\n\nexport function getConfig() {\n  if (process.env.NODE_ENV === \"test\") {\n    return {};\n  }\n\n  if (config.engineName) return config;\n\n  if (\n    typeof window !== \"undefined\" &&\n    window.appConfig &&\n    window.appConfig.engineName\n  ) {\n    return window.appConfig;\n  }\n\n  return {};\n}\n\nfunction toLowerCase(string) {\n  if (string) return string.toLowerCase();\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport function getTitleField() {\n  // If no title field configuration has been provided, we attempt\n  // to use a \"title\" field, if one exists\n  return getConfig().titleField || \"title\";\n}\n\nexport function getUrlField() {\n  return getConfig().urlField;\n}\n\nexport function getFacetFields() {\n  return getConfig().facets || [];\n}\n\nexport function getSortFields() {\n  return getConfig().sortFields || [];\n}\n\nexport function getResultTitle(result) {\n  const titleField = getTitleField();\n\n  return result.getSnippet(titleField);\n}\n\n// Because if a field is configured to display as a \"title\", we don't want\n// to display it again in the fields list\nexport function stripUnnecessaryResultFields(resultFields) {\n  return Object.keys(resultFields).reduce((acc, n) => {\n    if (\n      [\n        \"_meta\",\n        \"id\",\n        toLowerCase(getTitleField()),\n        toLowerCase(getUrlField())\n      ].includes(toLowerCase(n))\n    ) {\n      return acc;\n    }\n\n    acc[n] = resultFields[n];\n    return acc;\n  }, {});\n}\n\nexport function buildSearchOptionsFromConfig() {\n  const config = getConfig();\n  const searchFields = (config.searchFields || config.fields || []).reduce(\n    (acc, n) => {\n      acc = acc || {};\n      acc[n] = {};\n      return acc;\n    },\n    undefined\n  );\n\n  const resultFields = (config.resultFields || config.fields || []).reduce(\n    (acc, n) => {\n      acc = acc || {};\n      acc[n] = {\n        raw: {},\n        snippet: {\n          size: 100,\n          fallback: true\n        }\n      };\n      return acc;\n    },\n    undefined\n  );\n\n  // We can't use url or title fields unless they're actually\n  // in the reuslts.\n  if (config.urlField) {\n    resultFields[config.urlField] = {\n      raw: {},\n      snippet: {\n        size: 100,\n        fallback: true\n      }\n    };\n  }\n\n  if (config.titleField) {\n    resultFields[config.titleField] = {\n      raw: {},\n      snippet: {\n        size: 100,\n        fallback: true\n      }\n    };\n  }\n\n  const searchOptions = {};\n  searchOptions.result_fields = resultFields;\n  searchOptions.search_fields = searchFields;\n  return searchOptions;\n}\n\nexport function buildFacetConfigFromConfig() {\n  const config = getConfig();\n  console.log(config);\n  const facets = (config.facets || []).reduce((acc, n) => {\n    acc = acc || {};\n    acc[n] = {\n      type: \"value\",\n      size: 100\n    };\n    return acc;\n  }, undefined);\n\n  return facets;\n}\n\nexport function buildSortOptionsFromConfig() {\n  const config = getConfig();\n  return [\n    {\n      name: \"Relevance\",\n      value: \"\",\n      direction: \"\"\n    },\n    ...(config.sortFields || []).reduce((acc, sortField) => {\n      acc.push({\n        name: `${capitalizeFirstLetter(sortField)} ASC`,\n        value: sortField,\n        direction: \"asc\"\n      });\n      acc.push({\n        name: `${capitalizeFirstLetter(sortField)} DESC`,\n        value: sortField,\n        direction: \"desc\"\n      });\n      return acc;\n    }, [])\n  ];\n}\n\nexport function buildAutocompleteQueryConfig() {\n  const querySuggestFields = getConfig().querySuggestFields;\n  if (\n    !querySuggestFields ||\n    !Array.isArray(querySuggestFields) ||\n    querySuggestFields.length === 0\n  ) {\n    return {};\n  }\n\n  return {\n    suggestions: {\n      types: {\n        documents: {\n          fields: getConfig().querySuggestFields\n        }\n      }\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}