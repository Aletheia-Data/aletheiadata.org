{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { appendClassName } from \"../view-helpers\";\n\nvar LayoutSidebar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LayoutSidebar, _React$Component);\n\n  var _super = _createSuper(LayoutSidebar);\n\n  function LayoutSidebar(props) {\n    var _this;\n\n    _classCallCheck(this, LayoutSidebar);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleSidebar\", function () {\n      _this.setState(function (_ref) {\n        var isSidebarToggled = _ref.isSidebarToggled;\n        return {\n          isSidebarToggled: !isSidebarToggled\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderToggleButton\", function (label) {\n      if (!_this.props.children) return null;\n      return (\n        /*#__PURE__*/\n        React.createElement(\"button\", {\n          hidden: true,\n          type: \"button\",\n          className: \"sui-layout-sidebar-toggle\",\n          onClick: _this.toggleSidebar\n        }, label)\n      );\n    });\n\n    _this.state = {\n      isSidebarToggled: false\n    };\n    return _this;\n  }\n\n  _createClass(LayoutSidebar, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          children = _this$props.children;\n      var isSidebarToggled = this.state.isSidebarToggled;\n      var classes = appendClassName(className, isSidebarToggled ? \"\".concat(className, \"--toggled\") : null);\n      return (\n        /*#__PURE__*/\n        React.createElement(React.Fragment, null, this.renderToggleButton(\"Show Filters\"),\n        /*#__PURE__*/\n        React.createElement(\"div\", {\n          className: classes\n        }, this.renderToggleButton(\"Save Filters\"), children))\n      );\n    }\n  }]);\n\n  return LayoutSidebar;\n}(React.Component);\n\n_defineProperty(LayoutSidebar, \"propTypes\", {\n  className: PropTypes.string,\n  children: PropTypes.node\n});\n\nexport default LayoutSidebar;","map":null,"metadata":{},"sourceType":"module"}