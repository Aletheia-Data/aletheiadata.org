{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n/**\n * Filter results - Replaces current filter value\n *\n * Will trigger new search\n *\n * @param name String field name to filter on\n * @param value String field value to filter on\n * @param type String (Optional) type of filter to apply\n */\n\nexport default function setFilter(name, value) {\n  var _console;\n\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"all\"; // eslint-disable-next-line no-console\n\n  if (this.debug) (_console = console).log.apply(_console, [\"Search UI: Action\", \"setFilter\"].concat(Array.prototype.slice.call(arguments)));\n  var filters = this.state.filters;\n  filters = filters.filter(function (filter) {\n    return filter.field !== name || filter.type !== type;\n  });\n\n  this._updateSearchResults({\n    current: 1,\n    filters: [].concat(_toConsumableArray(filters), [{\n      field: name,\n      values: [value],\n      type: type\n    }])\n  });\n}","map":null,"metadata":{},"sourceType":"module"}