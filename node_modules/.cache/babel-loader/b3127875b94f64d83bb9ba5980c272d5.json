{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport { SearchDriver } from \"@elastic/search-ui\";\nimport SearchContext from \"./SearchContext\";\nimport defaultA11yMessages from \"./A11yNotifications\";\n/**\n * The SearchProvider primarily holds a reference to the SearchDriver and\n * exposes it to the rest of the application in a Context.\n */\n\nvar SearchProvider =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SearchProvider, _Component);\n\n  var _super = _createSuper(SearchProvider);\n\n  function SearchProvider() {\n    var _this;\n\n    _classCallCheck(this, SearchProvider);\n\n    _this = _super.call(this);\n    _this.state = {\n      driver: null\n    };\n    return _this;\n  }\n\n  _createClass(SearchProvider, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var config = this.props.config; // This initialization is done inside of componentDidMount, because initializing the SearchDriver server side\n      // will error out, since the driver depends on window. Placing the initialization inside of componentDidMount\n      // assures that it won't attempt to initialize server side.\n\n      var driver = new SearchDriver(_objectSpread({}, config, {\n        a11yNotificationMessages: _objectSpread({}, defaultA11yMessages, {}, config.a11yNotificationMessages)\n      }));\n      this.setState({\n        driver: driver\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.state.driver.tearDown();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children; // Since driver is initialized in componentDidMount above, we are waiting\n      // to render until the driver is available.\n\n      if (!this.state.driver) return null; // Passing the entire \"this.state\" to the Context is significant. Because\n      // Context determines when to re-render based on referential identity\n      // something like this could cause unnecessary renders:\n      //\n      // <SearchContext.Provider value={{driver: this.state.driver}}>\n      //\n      // By passing the entire state, we ensure that re-renders only occur when\n      // state is actually updated.\n\n      return (\n        /*#__PURE__*/\n        React.createElement(SearchContext.Provider, {\n          value: this.state\n        }, children)\n      );\n    }\n  }]);\n\n  return SearchProvider;\n}(Component);\n\n_defineProperty(SearchProvider, \"propTypes\", {\n  children: PropTypes.node.isRequired,\n  // Not providing a shape here because the shape matches the shape of\n  // SearchDriver. SearchDriver can do it's own parameter validation.\n  config: PropTypes.object\n});\n\nexport default SearchProvider;","map":null,"metadata":{},"sourceType":"module"}