{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { doFilterValuesMatch } from \"../helpers\";\n/**\n * Filter results - Adds to current filter value\n *\n * Will trigger new search\n *\n * @param name String field name to filter on\n * @param value String field value to filter on\n * @param type String (Optional) type of filter to apply\n */\n\nexport default function addFilter(name, value) {\n  var _console;\n\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"all\"; // eslint-disable-next-line no-console\n\n  if (this.debug) (_console = console).log.apply(_console, [\"Search UI: Action\", \"addFilter\"].concat(Array.prototype.slice.call(arguments)));\n  var filters = this.state.filters;\n  var existingFilter = filters.find(function (f) {\n    return f.field === name && f.type === type;\n  }) || {};\n  var allOtherFilters = filters.filter(function (f) {\n    return f.field !== name || f.type !== type;\n  }) || [];\n  var existingFilterValues = existingFilter.values || [];\n  var newFilterValues = existingFilterValues.find(function (existing) {\n    return doFilterValuesMatch(existing, value);\n  }) ? existingFilterValues : existingFilterValues.concat(value);\n\n  this._updateSearchResults({\n    current: 1,\n    filters: [].concat(_toConsumableArray(allOtherFilters), [{\n      field: name,\n      values: newFilterValues,\n      type: type\n    }])\n  });\n}","map":null,"metadata":{},"sourceType":"module"}