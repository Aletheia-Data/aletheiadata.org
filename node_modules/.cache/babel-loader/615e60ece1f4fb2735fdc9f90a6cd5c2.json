{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport PropTypes from \"prop-types\";\nimport { Component } from \"react\";\nimport { SearchBox } from \"@elastic/react-search-ui-views\";\nimport { withSearch } from \"..\";\nimport { Result, Suggestion } from \"../types\";\nexport var SearchBoxContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SearchBoxContainer, _Component);\n\n  var _super = _createSuper(SearchBoxContainer);\n\n  function SearchBoxContainer() {\n    var _this;\n\n    _classCallCheck(this, SearchBoxContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isFocused: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFocus\", function () {\n      _this.setState({\n        isFocused: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBlur\", function () {\n      _this.setState({\n        isFocused: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"completeSuggestion\", function (searchTerm) {\n      var _this$props = _this.props,\n          shouldClearFilters = _this$props.shouldClearFilters,\n          setSearchTerm = _this$props.setSearchTerm;\n      setSearchTerm(searchTerm, {\n        shouldClearFilters: shouldClearFilters\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\", function (e) {\n      var _this$props2 = _this.props,\n          shouldClearFilters = _this$props2.shouldClearFilters,\n          searchTerm = _this$props2.searchTerm,\n          setSearchTerm = _this$props2.setSearchTerm;\n      e.preventDefault();\n      setSearchTerm(searchTerm, {\n        shouldClearFilters: shouldClearFilters\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (value) {\n      var _this$props3 = _this.props,\n          autocompleteMinimumCharacters = _this$props3.autocompleteMinimumCharacters,\n          autocompleteResults = _this$props3.autocompleteResults,\n          autocompleteSuggestions = _this$props3.autocompleteSuggestions,\n          shouldClearFilters = _this$props3.shouldClearFilters,\n          searchAsYouType = _this$props3.searchAsYouType,\n          setSearchTerm = _this$props3.setSearchTerm,\n          debounceLength = _this$props3.debounceLength;\n\n      var options = _objectSpread({\n        autocompleteMinimumCharacters: autocompleteMinimumCharacters\n      }, (autocompleteResults || autocompleteSuggestions || searchAsYouType) && {\n        debounce: debounceLength || 200\n      }, {\n        shouldClearFilters: shouldClearFilters,\n        refresh: !!searchAsYouType,\n        autocompleteResults: !!autocompleteResults,\n        autocompleteSuggestions: !!autocompleteSuggestions\n      });\n\n      setSearchTerm(value, options);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleNotifyAutocompleteSelected\", function (selection) {\n      var _this$props4 = _this.props,\n          autocompleteResults = _this$props4.autocompleteResults,\n          trackAutocompleteClickThrough = _this$props4.trackAutocompleteClickThrough; // Because suggestions don't count as clickthroughs, only\n      // results\n\n      if (autocompleteResults && autocompleteResults.shouldTrackClickThrough !== false && !selection.suggestion) {\n        var _autocompleteResults$ = autocompleteResults.clickThroughTags,\n            clickThroughTags = _autocompleteResults$ === void 0 ? [] : _autocompleteResults$;\n        var id = selection.id.raw;\n        trackAutocompleteClickThrough(id, clickThroughTags);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultOnSelectAutocomplete\", function (selection) {\n      var autocompleteResults = _this.props.autocompleteResults;\n\n      _this.handleNotifyAutocompleteSelected(selection);\n\n      if (!selection.suggestion) {\n        var url = selection[autocompleteResults.urlField] ? selection[autocompleteResults.urlField].raw : \"\";\n\n        if (url) {\n          var target = autocompleteResults.linkTarget || \"_self\";\n          window.open(url, target);\n        }\n      } else {\n        _this.completeSuggestion(selection.suggestion);\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(SearchBoxContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var isFocused = this.state.isFocused;\n\n      var _this$props5 = this.props,\n          autocompleteMinimumCharacters = _this$props5.autocompleteMinimumCharacters,\n          autocompleteResults = _this$props5.autocompleteResults,\n          autocompleteSuggestions = _this$props5.autocompleteSuggestions,\n          autocompletedResults = _this$props5.autocompletedResults,\n          autocompletedSuggestions = _this$props5.autocompletedSuggestions,\n          className = _this$props5.className,\n          autocompleteView = _this$props5.autocompleteView,\n          inputProps = _this$props5.inputProps,\n          inputView = _this$props5.inputView,\n          onSelectAutocomplete = _this$props5.onSelectAutocomplete,\n          onSubmit = _this$props5.onSubmit,\n          searchTerm = _this$props5.searchTerm,\n          view = _this$props5.view,\n          rest = _objectWithoutProperties(_this$props5, [\"autocompleteMinimumCharacters\", \"autocompleteResults\", \"autocompleteSuggestions\", \"autocompletedResults\", \"autocompletedSuggestions\", \"className\", \"autocompleteView\", \"inputProps\", \"inputView\", \"onSelectAutocomplete\", \"onSubmit\", \"searchTerm\", \"view\"]);\n\n      var View = view || SearchBox;\n      var useAutocomplete = (!!autocompleteResults || !!autocompleteSuggestions) && searchTerm.length >= autocompleteMinimumCharacters;\n      var autocompletedSuggestionsCount = Object.entries(autocompletedSuggestions // eslint-disable-next-line no-unused-vars\n      ).reduce(function (acc, _ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            _ = _ref2[0],\n            value = _ref2[1];\n\n        return acc + value.length;\n      }, 0);\n      var allAutocompletedItemsCount = autocompletedSuggestionsCount + autocompletedResults.length;\n      var handleOnSelectAutocomplete;\n\n      if (onSelectAutocomplete) {\n        handleOnSelectAutocomplete = function handleOnSelectAutocomplete(selection) {\n          onSelectAutocomplete(selection, {\n            notifyAutocompleteSelected: _this2.handleNotifyAutocompleteSelected,\n            completeSuggestion: _this2.completeSuggestion,\n            autocompleteResults: _this2.props.autocompleteResults\n          }, _this2.defaultOnSelectAutocomplete);\n        };\n      }\n\n      return View(_objectSpread({\n        allAutocompletedItemsCount: allAutocompletedItemsCount,\n        autocompleteView: autocompleteView,\n        autocompleteResults: autocompleteResults,\n        autocompleteSuggestions: autocompleteSuggestions,\n        autocompletedResults: autocompletedResults,\n        autocompletedSuggestions: autocompletedSuggestions,\n        className: className,\n        autocompletedSuggestionsCount: autocompletedSuggestionsCount,\n        completeSuggestion: this.completeSuggestion,\n        isFocused: isFocused,\n        notifyAutocompleteSelected: this.handleNotifyAutocompleteSelected,\n        onChange: function onChange(value) {\n          return _this2.handleChange(value);\n        },\n        onSelectAutocomplete: handleOnSelectAutocomplete || this.defaultOnSelectAutocomplete,\n        onSubmit: onSubmit ? function (e) {\n          e.preventDefault();\n          onSubmit(searchTerm);\n        } : this.handleSubmit,\n        useAutocomplete: useAutocomplete,\n        value: searchTerm,\n        inputProps: _objectSpread({\n          onFocus: this.handleFocus,\n          onBlur: this.handleBlur\n        }, inputProps),\n        inputView: inputView\n      }, rest));\n    }\n  }]);\n\n  return SearchBoxContainer;\n}(Component);\n\n_defineProperty(SearchBoxContainer, \"propTypes\", {\n  // Props\n  autocompleteMinimumCharacters: PropTypes.number,\n  autocompleteResults: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({\n    clickThroughTags: PropTypes.arrayOf(PropTypes.string),\n    linkTarget: PropTypes.string,\n    sectionTitle: PropTypes.string,\n    shouldTrackClickThrough: PropTypes.bool,\n    titleField: PropTypes.string.isRequired,\n    urlField: PropTypes.string.isRequired\n  })]),\n  autocompleteSuggestions: PropTypes.oneOfType([PropTypes.bool, PropTypes.exact({\n    sectionTitle: PropTypes.string\n  }), PropTypes.objectOf(PropTypes.exact({\n    sectionTitle: PropTypes.string\n  }))]),\n  autocompleteView: PropTypes.func,\n  className: PropTypes.string,\n  shouldClearFilters: PropTypes.bool,\n  debounceLength: PropTypes.number,\n  inputProps: PropTypes.object,\n  inputView: PropTypes.func,\n  onSelectAutocomplete: PropTypes.func,\n  onSubmit: PropTypes.func,\n  searchAsYouType: PropTypes.bool,\n  view: PropTypes.func,\n  // State\n  autocompletedResults: PropTypes.arrayOf(Result).isRequired,\n  autocompletedSuggestions: PropTypes.objectOf(PropTypes.arrayOf(Suggestion)).isRequired,\n  searchTerm: PropTypes.string.isRequired,\n  // Actions\n  setSearchTerm: PropTypes.func.isRequired,\n  trackAutocompleteClickThrough: PropTypes.func.isRequired\n});\n\n_defineProperty(SearchBoxContainer, \"defaultProps\", {\n  autocompleteMinimumCharacters: 0,\n  shouldClearFilters: true\n});\n\nexport default withSearch(function (_ref3) {\n  var autocompletedResults = _ref3.autocompletedResults,\n      autocompletedSuggestions = _ref3.autocompletedSuggestions,\n      searchTerm = _ref3.searchTerm,\n      setSearchTerm = _ref3.setSearchTerm,\n      trackAutocompleteClickThrough = _ref3.trackAutocompleteClickThrough;\n  return {\n    autocompletedResults: autocompletedResults,\n    autocompletedSuggestions: autocompletedSuggestions,\n    searchTerm: searchTerm,\n    setSearchTerm: setSearchTerm,\n    trackAutocompleteClickThrough: trackAutocompleteClickThrough\n  };\n})(SearchBoxContainer);","map":null,"metadata":{},"sourceType":"module"}