{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport PropTypes from \"prop-types\";\nimport { Component } from \"react\";\nimport { MultiCheckboxFacet } from \"@elastic/react-search-ui-views\";\nimport { helpers } from \"@elastic/search-ui\";\nimport { Facet, Filter, FilterType } from \"../types\";\nimport { accentFold } from \"../helpers\";\nimport { withSearch } from \"..\";\nvar markSelectedFacetValuesFromFilters = helpers.markSelectedFacetValuesFromFilters;\nexport var FacetContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FacetContainer, _Component);\n\n  var _super = _createSuper(FacetContainer);\n\n  function FacetContainer(_ref) {\n    var _this;\n\n    var _ref$show = _ref.show,\n        show = _ref$show === void 0 ? 5 : _ref$show;\n\n    _classCallCheck(this, FacetContainer);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClickMore\", function (totalOptions) {\n      _this.setState(function (_ref2) {\n        var more = _ref2.more;\n        var visibleOptionsCount = more + 10;\n        var showingAll = visibleOptionsCount >= totalOptions;\n        if (showingAll) visibleOptionsCount = totalOptions;\n\n        _this.props.a11yNotify(\"moreFilters\", {\n          visibleOptionsCount: visibleOptionsCount,\n          showingAll: showingAll\n        });\n\n        return {\n          more: visibleOptionsCount\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFacetSearch\", function (searchTerm) {\n      _this.setState({\n        searchTerm: searchTerm\n      });\n    });\n\n    _this.state = {\n      more: show,\n      searchTerm: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(FacetContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          more = _this$state.more,\n          searchTerm = _this$state.searchTerm;\n\n      var _this$props = this.props,\n          addFilter = _this$props.addFilter,\n          className = _this$props.className,\n          facets = _this$props.facets,\n          field = _this$props.field,\n          filterType = _this$props.filterType,\n          filters = _this$props.filters,\n          label = _this$props.label,\n          removeFilter = _this$props.removeFilter,\n          setFilter = _this$props.setFilter,\n          view = _this$props.view,\n          isFilterable = _this$props.isFilterable,\n          a11yNotify = _this$props.a11yNotify,\n          rest = _objectWithoutProperties(_this$props, [\"addFilter\", \"className\", \"facets\", \"field\", \"filterType\", \"filters\", \"label\", \"removeFilter\", \"setFilter\", \"view\", \"isFilterable\", \"a11yNotify\"]);\n\n      var facetsForField = facets[field];\n      if (!facetsForField) return null; // By using `[0]`, we are currently assuming only 1 facet per field. This will likely be enforced\n      // in future version, so instead of an array, there will only be one facet allowed per field.\n\n      var facet = facetsForField[0];\n      var facetValues = markSelectedFacetValuesFromFilters(facet, filters, field, filterType).data;\n      var selectedValues = facetValues.filter(function (fv) {\n        return fv.selected;\n      }).map(function (fv) {\n        return fv.value;\n      });\n      if (!facetValues.length && !selectedValues.length) return null;\n\n      if (searchTerm.trim()) {\n        facetValues = facetValues.filter(function (option) {\n          return accentFold(option.value).toLowerCase().includes(accentFold(searchTerm).toLowerCase());\n        });\n      }\n\n      var View = view || MultiCheckboxFacet;\n      return View(_objectSpread({\n        className: className,\n        label: label,\n        onMoreClick: this.handleClickMore.bind(this, facetValues.length),\n        onRemove: function onRemove(value) {\n          removeFilter(field, value, filterType);\n        },\n        onChange: function onChange(value) {\n          setFilter(field, value, filterType);\n        },\n        onSelect: function onSelect(value) {\n          addFilter(field, value, filterType);\n        },\n        options: facetValues.slice(0, more),\n        showMore: facetValues.length > more,\n        values: selectedValues,\n        showSearch: isFilterable,\n        onSearch: function onSearch(value) {\n          _this2.handleFacetSearch(value);\n        },\n        searchPlaceholder: \"Filter \".concat(field)\n      }, rest));\n    }\n  }]);\n\n  return FacetContainer;\n}(Component);\n\n_defineProperty(FacetContainer, \"propTypes\", {\n  // Props\n  className: PropTypes.string,\n  field: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  filterType: FilterType,\n  show: PropTypes.number,\n  view: PropTypes.func,\n  isFilterable: PropTypes.bool,\n  // State\n  filters: PropTypes.arrayOf(Filter).isRequired,\n  facets: PropTypes.objectOf(PropTypes.arrayOf(Facet)).isRequired,\n  // Actions\n  addFilter: PropTypes.func.isRequired,\n  removeFilter: PropTypes.func.isRequired,\n  setFilter: PropTypes.func.isRequired,\n  a11yNotify: PropTypes.func.isRequired\n});\n\n_defineProperty(FacetContainer, \"defaultProps\", {\n  filterType: \"all\",\n  isFilterable: false\n});\n\nexport default withSearch(function (_ref3) {\n  var filters = _ref3.filters,\n      facets = _ref3.facets,\n      addFilter = _ref3.addFilter,\n      removeFilter = _ref3.removeFilter,\n      setFilter = _ref3.setFilter,\n      a11yNotify = _ref3.a11yNotify;\n  return {\n    filters: filters,\n    facets: facets,\n    addFilter: addFilter,\n    removeFilter: removeFilter,\n    setFilter: setFilter,\n    a11yNotify: a11yNotify\n  };\n})(FacetContainer);","map":null,"metadata":{},"sourceType":"module"}