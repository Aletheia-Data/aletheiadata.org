{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction adaptation1AdaptFacetValue(facetValue) {\n  var additionalFacetValueFieldsForField = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var hasValue = facetValue.hasOwnProperty(\"value\");\n\n  var count = facetValue.count,\n      value = facetValue.value,\n      rest = _objectWithoutProperties(facetValue, [\"count\", \"value\"]);\n\n  return {\n    count: count,\n    value: hasValue ? value : _objectSpread({}, rest, {}, additionalFacetValueFieldsForField)\n  };\n}\n\nfunction adaptation2AddLabelToFacet(fieldName, facet) {\n  return _objectSpread({\n    field: fieldName\n  }, facet);\n}\n\nfunction adaptFacets(facets, _ref) {\n  var _ref$additionalFacetV = _ref.additionalFacetValueFields,\n      additionalFacetValueFields = _ref$additionalFacetV === void 0 ? {} : _ref$additionalFacetV;\n  if (!facets || Object.keys(facets).length === 0) return facets;\n  return Object.entries(facets).reduce(function (acc, _ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        fieldName = _ref3[0],\n        facet = _ref3[1];\n\n    var adaptedFacet = facet.map(function (v) {\n      var type = v.type,\n          data = v.data,\n          rest = _objectWithoutProperties(v, [\"type\", \"data\"]);\n\n      return adaptation2AddLabelToFacet(fieldName, _objectSpread({\n        type: type,\n        data: data.map(function (f) {\n          return adaptation1AdaptFacetValue(f, additionalFacetValueFields[fieldName]);\n        })\n      }, rest));\n    });\n    return _objectSpread({}, acc, _defineProperty({}, fieldName, adaptedFacet));\n  }, {});\n}\n\nexport function adaptResponse(response) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var facets = response.info.facets;\n  var requestId = response.info.meta.request_id;\n  var totalPages = response.info.meta.page ? response.info.meta.page.total_pages : undefined;\n  var totalResults = response.info.meta.page ? response.info.meta.page.total_results : undefined;\n  return _objectSpread({}, facets && {\n    facets: adaptFacets(facets, options)\n  }, {\n    requestId: requestId,\n    results: response.rawResults\n  }, totalPages !== undefined && {\n    totalPages: totalPages\n  }, {}, totalResults !== undefined && {\n    totalResults: totalResults\n  });\n}","map":null,"metadata":{},"sourceType":"module"}