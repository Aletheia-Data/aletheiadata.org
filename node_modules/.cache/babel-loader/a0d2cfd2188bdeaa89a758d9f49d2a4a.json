{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { appendClassName, getUrlSanitizer } from \"./view-helpers\";\nimport { isFieldValueWrapper } from \"./types/FieldValueWrapper\";\n\nfunction getFieldType(result, field, type) {\n  if (result[field]) return result[field][type];\n}\n\nfunction getRaw(result, field) {\n  return getFieldType(result, field, \"raw\");\n}\n\nfunction getSnippet(result, field) {\n  return getFieldType(result, field, \"snippet\");\n}\n\nfunction htmlEscape(str) {\n  if (!str) return \"\";\n  return String(str).replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#39;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n}\n\nfunction getEscapedField(result, field) {\n  // Fallback to raw values here, because non-string fields\n  // will not have a snippet fallback. Raw values MUST be html escaped.\n  var safeField = getSnippet(result, field) || htmlEscape(getRaw(result, field));\n  return Array.isArray(safeField) ? safeField.join(\", \") : safeField;\n}\n\nfunction getEscapedFields(result) {\n  return Object.keys(result).reduce(function (acc, field) {\n    // If we receive an arbitrary value from the response, we may not properly\n    // handle it, so we should filter out arbitrary values here.\n    //\n    // I.e.,\n    // Arbitrary value: \"_metaField: '1939191'\"\n    // vs.\n    // FieldValueWrapper: \"_metaField: {raw: '1939191'}\"\n    if (!isFieldValueWrapper(result[field])) return acc;\n    return _objectSpread({}, acc, _defineProperty({}, field, getEscapedField(result, field)));\n  }, {});\n}\n\nfunction Result(_ref) {\n  var className = _ref.className,\n      result = _ref.result,\n      onClickLink = _ref.onClickLink,\n      titleField = _ref.titleField,\n      urlField = _ref.urlField,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"result\", \"onClickLink\", \"titleField\", \"urlField\"]);\n\n  var fields = getEscapedFields(result);\n  var title = getEscapedField(result, titleField);\n  var url = getUrlSanitizer(URL, location)(getRaw(result, urlField));\n  return (\n    /*#__PURE__*/\n    React.createElement(\"li\", _extends({\n      className: appendClassName(\"sui-result\", className)\n    }, rest),\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: \"sui-result__header\"\n    }, title && !url &&\n    /*#__PURE__*/\n    React.createElement(\"span\", {\n      className: \"sui-result__title\",\n      dangerouslySetInnerHTML: {\n        __html: title\n      }\n    }), title && url &&\n    /*#__PURE__*/\n    React.createElement(\"a\", {\n      className: \"sui-result__title sui-result__title-link\",\n      dangerouslySetInnerHTML: {\n        __html: title\n      },\n      href: url,\n      onClick: onClickLink,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\"\n    })),\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: \"sui-result__body\"\n    },\n    /*#__PURE__*/\n    React.createElement(\"ul\", {\n      className: \"sui-result__details\"\n    }, Object.entries(fields).map(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          fieldName = _ref3[0],\n          fieldValue = _ref3[1];\n\n      return (\n        /*#__PURE__*/\n        React.createElement(\"li\", {\n          key: fieldName\n        },\n        /*#__PURE__*/\n        React.createElement(\"span\", {\n          className: \"sui-result__key\"\n        }, fieldName), \" \",\n        /*#__PURE__*/\n        React.createElement(\"span\", {\n          className: \"sui-result__value\",\n          dangerouslySetInnerHTML: {\n            __html: fieldValue\n          }\n        }))\n      );\n    }))))\n  );\n}\n\nResult.propTypes = {\n  result: PropTypes.object.isRequired,\n  onClickLink: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  titleField: PropTypes.string,\n  urlField: PropTypes.string\n};\nexport default Result;","map":null,"metadata":{},"sourceType":"module"}