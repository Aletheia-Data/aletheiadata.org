{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React from \"react\";\nimport SearchContext from \"./SearchContext\";\n\nfunction buildContextForProps(context) {\n  return _objectSpread({}, context.driver.getState(), {}, context.driver.getActions());\n}\n/* For a given object execute mapContextToProps to pluck out the relevant\nproperties */\n\n\nfunction giveMeJustWhatINeeded(stateOrContext, mapContextToProps, props) {\n  var mapContextToPropsToUse = props.mapContextToProps || mapContextToProps;\n  return mapContextToPropsToUse(stateOrContext, props) || {};\n}\n/**\n * This is a Higher Order Component that wraps a component and injects state and actions from Search UI, effectively\n * \"connecting\" it to Search UI.\n *\n * Components using `withSearch` will be \"Pure\" components.\n * It is important to understand the implications of using a PureComponent, as described here:\n * https://reactjs.org/docs/optimizing-performance.html#examples\n *\n * @param Function mapContextToProps A function that accepts the context and allows you to pick the values to be passed as props\n * into the component. This allows you to \"select\" which values from the context to use.\n * @param Function Component\n */\n\n\nexport default function withSearch(mapContextToProps) {\n  if (!mapContextToProps) {\n    throw \"withSearch requires a function to be provided which returns an object with at least one value.\";\n  }\n\n  return function (Component) {\n    var WithSearch =\n    /*#__PURE__*/\n    function (_React$PureComponent) {\n      _inherits(WithSearch, _React$PureComponent);\n\n      var _super = _createSuper(WithSearch);\n\n      function WithSearch(props, context) {\n        var _this;\n\n        _classCallCheck(this, WithSearch);\n\n        _this = _super.call(this);\n\n        _defineProperty(_assertThisInitialized(_this), \"subscription\", function (state) {\n          if (_this.unmounted) return;\n\n          _this.setState(function (prevState) {\n            return giveMeJustWhatINeeded(_objectSpread({}, prevState, {}, state), mapContextToProps, _this.props);\n          });\n        });\n\n        _this.state = _objectSpread({}, giveMeJustWhatINeeded(buildContextForProps(context), // eslint-disable-next-line react/prop-types\n        mapContextToProps, props)); // Note that we subscribe to changes at the component level, rather than\n        // at the top level Provider, so that we are re-rendering the entire\n        // subtree when state changes in the Provider.\n\n        context.driver.subscribeToStateChanges(_this.subscription);\n        return _this;\n      }\n\n      _createClass(WithSearch, [{\n        key: \"componentWillUnmount\",\n        value: function componentWillUnmount() {\n          this.unmounted = true;\n          this.context.driver.unsubscribeToStateChanges(this.subscription);\n        }\n      }, {\n        key: \"render\",\n        value: function render() {\n          // eslint-disable-next-line react/prop-types\n          var rest = _extends({}, this.props);\n\n          return (\n            /*#__PURE__*/\n            React.createElement(Component, _extends({}, this.state, rest))\n          );\n        }\n      }]);\n\n      return WithSearch;\n    }(React.PureComponent);\n\n    WithSearch.contextType = SearchContext;\n    return WithSearch;\n  };\n}","map":null,"metadata":{},"sourceType":"module"}